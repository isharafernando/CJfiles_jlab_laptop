****************************************************************
*     Stand-alone CJ computation of str.fns. and PDFs - demonstration
*
*     Uses only the needed subroutines from the fitpack10 fitting 
*     package and external .par parameter file containing the 
*     PDF parameterization. Any .par file generated by fitpack10
*     can be used.
*
*     Programmers: aa = A.Accardi (accardi@jlab.org)
*
*     HISTORY:
*
*     F2comp      Modified from 'fillgf10.f' 
*     (11 Mar 10) Integrates also 'dist10' - aa
*     (20 Apr 10) Tested against fitpack10, many small improvements - aa
*
****************************************************************
      PROGRAM F2COMP
      implicit none
      character*50 parfile,pdffile,cbeam,cstruc
      double precision ht(4),Q2,xB
      double precision UN,DN,sea,seaN,seaA
      integer iQ2,ixb

*    *** variables and common blocks needed by strfn
      integer inuke,itm,iht,ibeam,istruc
      double precision par(100),V(4),sfn_p,sfn_n,sfn_d
      double precision U,D,UB,DB,SB,CB,BB,GLUE
 
*    *** Q2 grid for F2 computation
      integer nQ2

      !parameter(nQ2=8)
      !double precision Q2gr(nQ2)
      !data Q2gr/ 3.,5.,6.,7.,12.,20.,50.,100. /

      !parameter(nQ2=1)
      !double precision Q2gr(nQ2)
      !data Q2gr/ 3.785/

      parameter(nQ2=2)
      double precision Q2gr(nQ2)
      !data Q2gr/ 1.75, 2.5, 3.75, 5., 6.5, 8., 10., 15., 20., 45./
      data Q2gr/ 1.69,100./

*    *** Nuclear PDFS
      double precision UA,DA,UBA,DBA,SBA,CBA,BBA,GLUEA
      common/nPDF/UA,DA,UBA,DBA,SBA,CBA,BBA,GLUEA


      if (iargc().ne.3) then
         print*, 'SYNTAX: ./F2comp ibeam istruc parfile'
         print*, '(to change TMC, HT, smearing comapred to .par file '
     &        //'see F2comp.f and recompile)'
         stop
      end if


*    *** Part I: creat PDFs from a parameter file 

*    ... Reads in parameter file, and store params in 'par(100)'
      !parfile= 'du.wbarel_CDBonn_mKPhi.par' 
      !parfile= 'du.wbarel_WJC1_onsh.par'   
      parfile = 'du.wbarel_AV18_mKP.par'   
      !parfile = 'p4.wbarel_AV18_mKP.par'   
      call getarg(3,parfile)
      call readpar(parfile,par,inuke,itm,iht)

*      inuke = 1414
*    ... evolves the PDFs
      print*, 'Performing QCD evolution...'

      call QCDev

*    ... saves gf matrix if not already done
*        (not necessary for PDF or F2 computations; just demonstrates
*        one further capability of this code)
      !parfile='CJ.AV18_mKP.gf'
      !call writegf(parfile)
*    ... and, of course, it is also possible to read in a .gf file 
*        (if available) instead of evolving the PDF parametrization 
*        as done before, see part III.



*    *** Part II: F2 computation

*    ... set up for F2 computation 
*
*        ibeam     = (i)  beam type: 1=e 2=nu 3=nubar 
*        istruc    = (i)  structure fn: 0=FL 1=F1 2=F2 3=xF3  
*        itm       = (i)  TMC  0=no  1=approx GP  2=CF
*        iht       = (i)  HT   0=no  1=C=C(xB)  2=C=C(xi_Nachtmann)
*        v(4)      = (dp) variables - for DIS v(1)=xB  v(2)=Q^2  v(3,4) unused
*        par(100)  = (dp) PDF parameters
*        sfn       = (dp) the requested structure function

*    ... reads in ibeam and istruc from the command line
      call getarg(1,cbeam)
      read(cbeam,'(i10)') ibeam
      call getarg(2,cstruc)
      read(cstruc,'(i10)') istruc

      !                       ! These are the CTE6X defaults:
      !ibeam = 1              ! 1 == electron beam
      !istruc = 2             ! 0 == FL 1 == F1  2 == F2  3 == xF3

*    ... TMC, HT, and nuclear corrections for structure functions:
*    ... override the defaults obtained with 'readpar' only if you 
*    ... really want to do it.

      !inuke = inuke + 10000  ! for gamma=1 smearing independent of Q^2
      !itm = 0               ! switch off the TMCs
      !iht  = 0               ! switch off HT corrections


*    ... writes F2 and PDFs 
      write(6,23) 'F2 and PDFs from QCD evolution'
      if (istruc.eq.0) then 
         write(6,24) '  xB      Q2     FL_p      FL_n      FL_D      '
     &        //'  u         d         g'
      else if (istruc.eq.1) then 
         write(6,24) '  xB      Q2     F1_p      F1_n      F1_D      '
     &        //'  u         d         g'
      else if (istruc.eq.2) then 
         write(6,24) '  xB      Q2     F2_p      F2_n      F2_D      '
     &        //'  u         d         g'
      else if (istruc.eq.3) then 
         write(6,24) '  xB      Q2    xF3_p     xF3_n     xF3_D      '
      else if (istruc.eq.-1) then
         write(6,24) '  xB      Q2    UA/UN     DA/DN     GA/GN      '
     &        //'seaA/seaN   '
      end if

      do iQ2 = 1, nQ2
         Q2 = Q2gr(iQ2)
         do ixB=1,95
            xb = 0.01 * ixb 
            v(1) = xB
            v(2) = Q2
            ! Structure functions
            call FFcalc(xb,Q2,par,ibeam,istruc,itm,iht,inuke
     &           ,sfn_p,sfn_n,sfn_d)            
            ! proton PDFs
            call PDFsa(xB,Q2,U,D,UB,DB,SB,CB,BB,GLUE)
            ! writes to file
            if (istruc.ne.-1) then
               write(6,22) xB,Q2,sfn_p,sfn_n,sfn_d,u,d,glue
            else
               call deuteronsf(ibeam,-1,inuke,itm,iht,0,v,par,sfn_d)
               UN = (U+D)/2
               DN = UN
               sea = U-UB+D-DB+2*(SB+CB+BB)
               seaN = UN-UB+DN-DB+2*(SB+CB+BB) 
               seaA = UA-UBA+DA-DBA+2*(SBA+CBA+BBA) 
               write(6,22) xB,Q2, UA/U, DA/D, GLUEA/GLUE, seaA/seaN 
            end if
         end do
      end do

      goto 999

*    *** Part III: PDFs from an existing .gf file 
*    ... Should coincide with the PDFs from Part I

*    ... reads the gf matrix
      pdffile=parfile
      call readgf(pdffile)

*    ... prints out the PDF      

      write(6,23) 'PDFs from .gf file'
      write(6,24) '  xB      Q2       u         d         g'
 
      do iQ2 = 1, nQ2
         Q2 = Q2gr(iQ2)
         do ixB=1,95
            xb = 0.01 * ixb
            call PDFsa(xB,Q2,U,D,UB,DB,SB,CB,BB,GLUE)
            write(6,22) xB,Q2,u,d,glue
         end do
      end do

 22   format(F5.2,F8.2,10e13.4)
 23   format(//,A,//)
 24   format(A,/)



 999  CALL EXIT 
      END 






